AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation stack for AI Photo Search - Lambdas, API Gateway, and S3 Buckets

Resources:

  ### S3 Bucket: Frontend Website ###
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  ### Bucket Policy: Allow public read access ###
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "${FrontendBucket.Arn}/*"

  ### S3 Bucket: Image Storage ###
  StorageBucket:
    Type: AWS::S3::Bucket

  ### IAM Role for Lambda ###
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  ### Lambda Function: index-photos-v2 ###
  IndexPhotosFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: index-photos-v2
      Runtime: python3.9
      Handler: index-photos.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return { "statusCode": 200, "body": "Index Lambda Working!" }

  ### Lambda Function: search-photos-v2 ###
  SearchPhotosFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: search-photos-v2
      Runtime: python3.9
      Handler: search-photos.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return { "statusCode": 200, "body": "Search Lambda Active!" }

  ### API Gateway ###
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: AI-PhotoSearch-API

  UploadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: upload
      RestApiId: !Ref ApiGatewayRestApi

  UploadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref UploadResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IndexPhotosFunction.Arn}/invocations

  SearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: search
      RestApiId: !Ref ApiGatewayRestApi

  SearchMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref SearchResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchPhotosFunction.Arn}/invocations

  ### Lambda Permissions (with fix) ###
  IndexPhotosInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: IndexPhotosFunction
    Properties:
      FunctionName: index-photos-v2
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/upload

  SearchPhotosInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: SearchPhotosFunction
    Properties:
      FunctionName: search-photos-v2
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/search

Outputs:
  FrontendWebsiteURL:
    Description: Public URL for the hosted frontend
    Value: !Sub http://${FrontendBucket}.s3-website-${AWS::Region}.amazonaws.com
